// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A flow that provides a prioritized list of suitable crops based on region, soil, and weather.
 *
 * - getPrioritizedCrops - A function that returns a prioritized list of crops.
 * - GetPrioritizedCropsInput - The input type for the getPrioritizedCrops function.
 * - GetPrioritizedCropsOutput - The return type for the getPrioritizedCrops function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GetPrioritizedCropsInputSchema = z.object({
  region: z.string().describe('The region where the crop is being grown.'),
  predictedWeatherConditions: z
    .string()
    .describe('The predicted weather conditions for the growing period.'),
  soilMetrics: z.string().describe('The metrics for the soil health.'),
  language: z.string().describe('The language for the recommendations.'),
});
export type GetPrioritizedCropsInput = z.infer<
  typeof GetPrioritizedCropsInputSchema
>;

const CropPrioritySchema = z.object({
    cropName: z.string().describe('The name of the crop.'),
    priority: z.number().min(1).max(5).describe('The priority of the crop, from 1 (highest) to 5 (lowest).'),
    reason: z.string().describe('A brief reason for the recommendation and priority.'),
});

const GetPrioritizedCropsOutputSchema = z.object({
  crops: z.array(CropPrioritySchema).describe('A list of at least 3 and up to 5 prioritized crops.'),
});
export type GetPrioritizedCropsOutput = z.infer<
  typeof GetPrioritizedCropsOutputSchema
>;

export async function getPrioritizedCrops(
  input: GetPrioritizedCropsInput
): Promise<GetPrioritizedCropsOutput> {
  return getPrioritizedCropsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'getPrioritizedCropsPrompt',
  input: {schema: GetPrioritizedCropsInputSchema},
  output: {schema: GetPrioritizedCropsOutputSchema},
  prompt: `You are an expert agricultural advisor. Based on the region, predicted weather conditions, and soil metrics, provide a prioritized list of at least 3 and up to 5 suitable crops. The recommendations should be in the language: {{{language}}}.

Region: {{{region}}}
Predicted Weather Conditions: {{{predictedWeatherConditions}}}
Soil Metrics: {{{soilMetrics}}}

Provide a list of at least 3 and up to 5 crops, ordered from highest priority (1) to lowest (5). For each crop, provide the crop name, its priority, and a brief reason for why it's suitable for the given conditions.`,
});

const getPrioritizedCropsFlow = ai.defineFlow(
  {
    name: 'getPrioritizedCropsFlow',
    inputSchema: GetPrioritizedCropsInputSchema,
    outputSchema: GetPrioritizedCropsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
