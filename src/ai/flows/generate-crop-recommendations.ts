// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A flow that provides actionable recommendations for irrigation, fertilization, and pest control, tailored to the crop type, region, and predicted weather conditions.
 *
 * - generateCropRecommendations - A function that handles the crop recommendation process.
 * - GenerateCropRecommendationsInput - The input type for the generateCropRecommendations function.
 * - GenerateCropRecommendationsOutput - The return type for the generateCropRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateCropRecommendationsInputSchema = z.object({
  cropType: z.string().describe('The type of crop being grown.'),
  region: z.string().describe('The region where the crop is being grown.'),
  predictedWeatherConditions: z
    .string()
    .describe('The predicted weather conditions for the growing period.'),
  soilMetrics: z.string().describe('The metrics for the soil health.'),
  historicalData: z.string().describe('Historical crop yield data for the crop and region.'),
  language: z.string().describe('The language for the recommendations.'),
  area: z.string().describe('The area of the farm.'),
});
export type GenerateCropRecommendationsInput = z.infer<
  typeof GenerateCropRecommendationsInputSchema
>;

const GenerateCropRecommendationsOutputSchema = z.object({
  irrigationRecommendations: z
    .string()
    .describe('Specific recommendations for irrigation.'),
  fertilizationRecommendations: z
    .string()
    .describe('Specific recommendations for fertilization.'),
  pestControlRecommendations: z
    .string()
    .describe('Specific recommendations for pest control.'),
});
export type GenerateCropRecommendationsOutput = z.infer<
  typeof GenerateCropRecommendationsOutputSchema
>;

export async function generateCropRecommendations(
  input: GenerateCropRecommendationsInput
): Promise<GenerateCropRecommendationsOutput> {
  return generateCropRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateCropRecommendationsPrompt',
  input: {schema: GenerateCropRecommendationsInputSchema},
  output: {schema: GenerateCropRecommendationsOutputSchema},
  prompt: `You are an expert agricultural advisor. Based on the crop type, region, predicted weather conditions, historical crop data and soil metrics, provide specific and actionable recommendations for irrigation, fertilization, and pest control. The recommendations should be in the language: {{{language}}}.

Crop Type: {{{cropType}}}
Region: {{{region}}}
Area: {{{area}}}
Predicted Weather Conditions: {{{predictedWeatherConditions}}}
Soil Metrics: {{{soilMetrics}}}
Historical Crop Data: {{{historicalData}}}

Provide clear and concise recommendations for each of the following areas:

Irrigation Recommendations:
Fertilization Recommendations:
Pest Control Recommendations:`,
});

const generateCropRecommendationsFlow = ai.defineFlow(
  {
    name: 'generateCropRecommendationsFlow',
    inputSchema: GenerateCropRecommendationsInputSchema,
    outputSchema: GenerateCropRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
